import{_ as e,c as t,G as s,e as a,E as i,b as l}from"./chunks/framework.BrC0DRXd.js";const n=JSON.parse('{"title":"如何不被平衡树折磨","description":"好东西","frontmatter":{"title":"如何不被平衡树折磨","tags":["原创"],"categories":["算法"],"date":"2025-7-14","description":"好东西","articleGPT":"。","head":[["link",{"rel":"canonical","href":"https://tsh1203.github.io/posts/2024/1028"}]]},"headers":[],"relativePath":"posts/2024/1028.md","filePath":"posts/2024/1028.md","lastUpdated":1759579795000}'),o={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},r={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 500 688","aria-hidden":"true"},d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 500 688","aria-hidden":"true"},h={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},c={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.112ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3585.7 1000","aria-hidden":"true"},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.774ex",height:"2.473ex",role:"img",focusable:"false",viewBox:"0 -843 2994 1093","aria-hidden":"true"};const m=e({name:"posts/2024/1028.md"},[["render",function(e,n,m,g,x,k){return l(),t("div",null,[n[26]||(n[26]=s('<p><s>沟槽的平衡树。</s></p><p>对于我这种树状数据结构非常不熟的人写平衡树是个非常折磨的事情，码量有些大，STL 好用但是功能有限，而且常数大，那有什么办法<s>偷懒</s>取巧呢？</p><h2 id="pb-ds-tree" tabindex="-1">pb_ds tree <a class="header-anchor" href="#pb-ds-tree" aria-label="Permalink to &quot;pb_ds tree&quot;">​</a></h2><p>请出本文的主人公：<code>#include&lt;bits/extc++.h&gt;</code>。</p><p><strong>注：使用时需要添加以下两行代码：</strong></p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __gnu_pbds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __gnu_cxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>一个非常小众的头文件，但功能非常强大，包含了哈希表，平衡二叉树，字典树，堆等，而且相较于 STL 功能更强大，但现在我们只需要用到内置的平衡树 tree。</p><p>tree 包含了<strong>红黑树、splay 树与有序向量树</strong>，默认是红黑树，另外两个时间复杂度不如红黑树。</p><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__gnu_pbds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__gnu_pbds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::null_type,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::less</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__gnu_pbds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::rb_tree_tag,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               __gnu_pbds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::tree_order_statistics_node_update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trr;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="成员函数" tabindex="-1">成员函数 <a class="header-anchor" href="#成员函数" aria-label="Permalink to &quot;成员函数&quot;">​</a></h3>',12)),a("ul",null,[n[9]||(n[9]=s("<li><code>insert(x)</code>：向树中插入一个元素 <code>x</code>，返回 <code>std::pair&lt;point_iterator, bool&gt;</code>，其中第一个元素代表插入位置的迭代器，第二个元素代表是否插入成功。</li><li><code>erase(x)</code>：从树中删除一个元素/迭代器 <code>x</code>。如果 <code>x</code> 是迭代器，则返回指向 <code>x</code> 下一个的迭代器（如果 <code>x</code> 是 <code>end()</code> 则返回 <code>end()</code>）；如果 <code>x</code> 是 <code>Key</code>，则返回是否删除成功（如果不存在则删除失败）。</li>",2)),a("li",null,[n[2]||(n[2]=a("code",null,"order_of_key(x)",-1)),n[3]||(n[3]=i("：返回严格小于 ")),n[4]||(n[4]=a("code",null,"x",-1)),n[5]||(n[5]=i(" 的元素个数（以 ")),n[6]||(n[6]=a("code",null,"Cmp_Fn",-1)),n[7]||(n[7]=i(" 作为比较逻辑），即从 ")),a("mjx-container",o,[(l(),t("svg",r,n[0]||(n[0]=[a("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[a("g",{"data-mml-node":"math"},[a("g",{"data-mml-node":"mn"},[a("path",{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z",style:{"stroke-width":"3"}})])])],-1)]))),n[1]||(n[1]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mn",null,"0")])],-1))]),n[8]||(n[8]=i(" 开始的排名。"))]),n[10]||(n[10]=s("<li><code>find_by_order(x)</code>：返回 <code>Cmp_Fn</code> 比较的排名所对应元素的迭代器。</li><li><code>lower_bound(x)</code>：返回第一个不小于 <code>x</code> 的元素所对应的迭代器（以 <code>Cmp_Fn</code> 作为比较逻辑）。</li><li><code>upper_bound(x)</code>：返回第一个严格大于 <code>x</code> 的元素所对应的迭代器（以 <code>Cmp_Fn</code> 作为比较逻辑）。</li><li><code>join(x)</code>：将 <code>x</code> 树并入当前树，<code>x</code> 树被清空（必须确保两树的 <strong>比较函数</strong> 和 <strong>元素类型</strong> 相同）。</li><li><code>split(x,b)</code>：以 <code>Cmp_Fn</code> 比较，小于等于 <code>x</code> 的属于当前树，其余的属于 <code>b</code> 树。</li><li><code>empty()</code>：返回是否为空。</li><li><code>size()</code>：返回大小。</li>",7))]),n[27]||(n[27]=a("p",null,[a("strong",null,[i("注：以上摘自 "),a("a",{href:"https://oi-wiki.org/lang/pb-ds/tree/",target:"_blank",rel:"noreferrer"},"OI Wiki")]),i("。")],-1)),n[28]||(n[28]=a("p",null,"几乎囊括了一个平衡树该有的功能。",-1)),n[29]||(n[29]=a("p",null,[i("什么？看不懂？"),a("s",null,"理解能力怎么这么差"),i("。")],-1)),n[30]||(n[30]=a("p",null,"简化一下：",-1)),a("ul",null,[n[16]||(n[16]=a("li",null,[a("code",null,"insert(x)"),i("：向树中插入一个元素 x。")],-1)),n[17]||(n[17]=a("li",null,[a("code",null,"erase(x)"),i("：从树中删除一个元素/迭代器 x。")],-1)),a("li",null,[n[13]||(n[13]=a("code",null,"order_of_key(x)",-1)),n[14]||(n[14]=i("：返回 x 从 ")),a("mjx-container",d,[(l(),t("svg",p,n[11]||(n[11]=[a("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[a("g",{"data-mml-node":"math"},[a("g",{"data-mml-node":"mn"},[a("path",{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z",style:{"stroke-width":"3"}})])])],-1)]))),n[12]||(n[12]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mn",null,"0")])],-1))]),n[15]||(n[15]=i(" 开始的排名（即从小到大的排名）。"))]),n[18]||(n[18]=s("<li><code>find_by_order(x)</code>：返回排名为 x 的元素的<strong>迭代器</strong>。</li><li><code>lower_bound(x)</code>：返回第一个不小于 x 的元素所对应的<strong>迭代器</strong>。</li><li><code>upper_bound(x)</code>：返回第一个严格大于 <code>x</code> 的元素所对应的<strong>迭代器</strong>。</li><li><code>join(x)</code>：将 x 树并入当前树，清空 x 树。</li><li><code>split(x,b)</code>：按值分裂，小于等于 x 的属于当前树，其余的属于 b 树。</li><li><code>empty()</code>：返回是否为空。</li><li><code>size()</code>：返回大小。</li>",7))]),n[31]||(n[31]=a("p",null,"是不是简单明了多了。",-1)),n[32]||(n[32]=a("p",null,[a("strong",null,"但是"),i("，tree 只能按值进行操作，如果想插入到对应位置，tree 不太方便，难道就要手打平衡树了吗？")],-1)),n[33]||(n[33]=a("h2",{id:"rope",tabindex:"-1"},[i("rope "),a("a",{class:"header-anchor",href:"#rope","aria-label":'Permalink to "rope"'},"​")],-1)),n[34]||(n[34]=a("h3",{id:"简介-1",tabindex:"-1"},[i("简介 "),a("a",{class:"header-anchor",href:"#简介-1","aria-label":'Permalink to "简介"'},"​")],-1)),a("p",null,[n[23]||(n[23]=i("可以实现块状链表的作用，但是采用可持久化平衡树实现，所以时间复杂度是 ")),a("mjx-container",h,[(l(),t("svg",c,n[19]||(n[19]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" style="stroke-width:3;"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)" style="stroke-width:3;"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2430,0)"><path data-c="2061" d="" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2596.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3196.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),n[20]||(n[20]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("mi",null,"log"),a("mo",{"data-mjx-texclass":"NONE"},"⁡"),a("mi",null,"n"),a("mo",{stretchy:"false"},")")])],-1))]),n[24]||(n[24]=i("（我咋记得有人说是 ")),a("mjx-container",Q,[(l(),t("svg",T,n[21]||(n[21]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msqrt" transform="translate(1152,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z" style="stroke-width:3;"></path></g><rect width="600" height="60" x="853" y="723"></rect></g><g data-mml-node="mo" transform="translate(2605,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),n[22]||(n[22]=a("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("msqrt",null,[a("mi",null,"n")]),a("mo",{stretchy:"false"},")")])],-1))]),n[25]||(n[25]=i("）。"))]),n[35]||(n[35]=s('<p>使用方法整体类似于 vector。</p><h3 id="成员函数-1" tabindex="-1">成员函数 <a class="header-anchor" href="#成员函数-1" aria-label="Permalink to &quot;成员函数&quot;">​</a></h3><ul><li><code>a.push_back(x)</code> 在 a 的末尾添加元素 x</li><li><code>a.insert(pos, x)</code> 在 a 的 pos 个位置添加元素 x</li><li><code>a.erase(pos, x)</code> 在 a 的 pos 个位置删除 x 个元素</li><li><code>a[x]</code> 访问 a 的第 x 个元素</li><li><code>a.length()</code> 或 <code>a.size()</code> 获取 a 的大小</li></ul><p><s>说白了就是 vector promax。</s></p><h2 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记" aria-label="Permalink to &quot;后记&quot;">​</a></h2><p>虽然 pd_ds 库很好用，但功能还不能满足全部的题目，所以还是要掌握基本的平衡树的。</p>',6))])}]]);export{n as __pageData,m as default};
